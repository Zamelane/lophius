// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SearchMovieData, SearchMovieResponse, DiscoverMovieData, DiscoverMovieResponse, MovieDetailsData, MovieDetailsResponse, TvSeriesDetailsData, TvSeriesDetailsResponse, SearchTvData, SearchTvResponse, SearchMultiData, SearchMultiResponse, SearchPersonData, SearchPersonResponse, ConfigurationDetailsData, ConfigurationDetailsResponse, TvSeasonDetailsData, TvSeasonDetailsResponse, TvEpisodeDetailsData, TvEpisodeDetailsResponse, DiscoverTvData, DiscoverTvResponse, MovieImagesData, MovieImagesResponse, TvSeriesImagesData, TvSeriesImagesResponse, TvSeasonImagesData, TvSeasonImagesResponse, TvEpisodeImagesData, TvEpisodeImagesResponse, TrendingAllData, TrendingAllResponse, TrendingMoviesData, TrendingMoviesResponse, TrendingTvData, TrendingTvResponse, MovieAccountStatesData, MovieAccountStatesResponse, TvSeriesAccountStatesData, TvSeriesAccountStatesResponse, TvEpisodeAccountStatesData, TvEpisodeAccountStatesResponse, TrendingPeopleData, TrendingPeopleResponse, MovieAlternativeTitlesData, MovieAlternativeTitlesResponse, MovieChangesData, MovieChangesResponse, MovieCreditsData, MovieCreditsResponse, MovieExternalIdsData, MovieExternalIdsResponse, MovieKeywordsData, MovieKeywordsResponse, MovieListsData, MovieListsResponse, MovieRecommendationsData, MovieRecommendationsResponse, MovieReleaseDatesData, MovieReleaseDatesResponse, MovieReviewsData, MovieReviewsResponse, MovieSimilarData, MovieSimilarResponse, MovieTranslationsData, MovieTranslationsResponse, MovieVideosData, MovieVideosResponse, MovieWatchProvidersData, MovieWatchProvidersResponse, MovieDeleteRatingData, MovieDeleteRatingResponse, MovieAddRatingData, MovieAddRatingResponse, AuthenticationCreateGuestSessionData, AuthenticationCreateGuestSessionResponse, AuthenticationCreateRequestTokenData, AuthenticationCreateRequestTokenResponse, AuthenticationCreateSessionData, AuthenticationCreateSessionResponse, AuthenticationCreateSessionFromV4TokenData, AuthenticationCreateSessionFromV4TokenResponse, AuthenticationDeleteSessionData, AuthenticationDeleteSessionResponse, FindByIdData, FindByIdResponse, PersonDetailsData, PersonDetailsResponse, PersonChangesData, PersonChangesResponse, TvSeriesChangesData, TvSeriesChangesResponse, PersonImagesData, PersonImagesResponse, PersonMovieCreditsData, PersonMovieCreditsResponse, PersonTvCreditsData, PersonTvCreditsResponse, PersonCombinedCreditsData, PersonCombinedCreditsResponse, PersonExternalIdsData, PersonExternalIdsResponse, PersonTaggedImagesData, PersonTaggedImagesResponse, TranslationsData, TranslationsResponse, PersonPopularListData, PersonPopularListResponse, MoviePopularListData, MoviePopularListResponse, MovieTopRatedListData, MovieTopRatedListResponse, MovieUpcomingListData, MovieUpcomingListResponse, MovieNowPlayingListData, MovieNowPlayingListResponse, TvSeriesAiringTodayListData, TvSeriesAiringTodayListResponse, TvSeriesOnTheAirListData, TvSeriesOnTheAirListResponse, TvSeriesPopularListData, TvSeriesPopularListResponse, TvSeriesTopRatedListData, TvSeriesTopRatedListResponse, MovieLatestIdData, MovieLatestIdResponse, TvSeriesLatestIdData, TvSeriesLatestIdResponse, TvSeriesAggregateCreditsData, TvSeriesAggregateCreditsResponse, TvSeriesAlternativeTitlesData, TvSeriesAlternativeTitlesResponse, TvSeriesContentRatingsData, TvSeriesContentRatingsResponse, TvSeriesCreditsData, TvSeriesCreditsResponse, TvSeriesEpisodeGroupsData, TvSeriesEpisodeGroupsResponse, TvSeriesExternalIdsData, TvSeriesExternalIdsResponse, TvSeriesKeywordsData, TvSeriesKeywordsResponse, TvSeriesRecommendationsData, TvSeriesRecommendationsResponse, TvSeriesReviewsData, TvSeriesReviewsResponse, TvSeriesScreenedTheatricallyData, TvSeriesScreenedTheatricallyResponse, TvSeriesSimilarData, TvSeriesSimilarResponse, TvSeriesTranslationsData, TvSeriesTranslationsResponse, TvSeriesVideosData, TvSeriesVideosResponse, TvSeriesWatchProvidersData, TvSeriesWatchProvidersResponse, TvSeriesDeleteRatingData, TvSeriesDeleteRatingResponse, TvSeriesAddRatingData, TvSeriesAddRatingResponse, TvSeasonAccountStatesData, TvSeasonAccountStatesResponse, TvSeasonAggregateCreditsData, TvSeasonAggregateCreditsResponse, TvSeasonChangesByIdData, TvSeasonChangesByIdResponse, TvSeasonCreditsData, TvSeasonCreditsResponse, TvSeasonExternalIdsData, TvSeasonExternalIdsResponse, TvSeasonTranslationsData, TvSeasonTranslationsResponse, TvSeasonVideosData, TvSeasonVideosResponse, TvEpisodeCreditsData, TvEpisodeCreditsResponse, TvEpisodeExternalIdsData, TvEpisodeExternalIdsResponse, TvEpisodeTranslationsData, TvEpisodeTranslationsResponse, TvEpisodeVideosData, TvEpisodeVideosResponse, TvEpisodeDeleteRatingData, TvEpisodeDeleteRatingResponse, TvEpisodeAddRatingData, TvEpisodeAddRatingResponse, AccountDetailsData, AccountDetailsResponse, AccountListsData, AccountListsResponse, AccountGetFavoritesData, AccountGetFavoritesResponse, AccountFavoriteTvData, AccountFavoriteTvResponse, AccountRatedMoviesData, AccountRatedMoviesResponse, AccountRatedTvData, AccountRatedTvResponse, AccountRatedTvEpisodesData, AccountRatedTvEpisodesResponse, AccountWatchlistMoviesData, AccountWatchlistMoviesResponse, AccountWatchlistTvData, AccountWatchlistTvResponse, AccountAddFavoriteData, AccountAddFavoriteResponse, AccountAddToWatchlistData, AccountAddToWatchlistResponse, CertificationMovieListData, CertificationMovieListResponse, CertificationsTvListData, CertificationsTvListResponse, ChangesMovieListData, ChangesMovieListResponse, ChangesTvListData, ChangesTvListResponse, ChangesPeopleListData, ChangesPeopleListResponse, CollectionDetailsData, CollectionDetailsResponse, CollectionImagesData, CollectionImagesResponse, CollectionTranslationsData, CollectionTranslationsResponse, CompanyDetailsData, CompanyDetailsResponse, CompanyAlternativeNamesData, CompanyAlternativeNamesResponse, CompanyImagesData, CompanyImagesResponse, CreditDetailsData, CreditDetailsResponse, GenreMovieListData, GenreMovieListResponse, GenreTvListData, GenreTvListResponse, GuestSessionRatedMoviesData, GuestSessionRatedMoviesResponse, GuestSessionRatedTvData, GuestSessionRatedTvResponse, GuestSessionRatedTvEpisodesData, GuestSessionRatedTvEpisodesResponse, WatchProvidersAvailableRegionsData, WatchProvidersAvailableRegionsResponse, WatchProvidersMovieListData, WatchProvidersMovieListResponse, WatchProviderTvListData, WatchProviderTvListResponse, KeywordDetailsData, KeywordDetailsResponse, KeywordMoviesData, KeywordMoviesResponse, ListDeleteData, ListDeleteResponse, ListDetailsData, ListDetailsResponse, ListCheckItemStatusData, ListCheckItemStatusResponse, ListCreateData, ListCreateResponse, ListAddMovieData, ListAddMovieResponse, ListRemoveMovieData, ListRemoveMovieResponse, ListClearData, ListClearResponse, NetworkDetailsData, NetworkDetailsResponse, DetailsCopyData, DetailsCopyResponse, AlternativeNamesCopyData, AlternativeNamesCopyResponse, ReviewDetailsData, ReviewDetailsResponse, AuthenticationValidateKeyData, AuthenticationValidateKeyResponse, AuthenticationValidateKeyError, TvSeasonWatchProvidersData, TvSeasonWatchProvidersResponse, ConfigurationCountriesData, ConfigurationCountriesResponse, ConfigurationJobsData, ConfigurationJobsResponse, ConfigurationLanguagesData, ConfigurationLanguagesResponse, ConfigurationPrimaryTranslationsData, ConfigurationPrimaryTranslationsResponse, ConfigurationTimezonesData, ConfigurationTimezonesResponse, AuthenticationCreateSessionFromLoginData, AuthenticationCreateSessionFromLoginResponse, PersonLatestIdData, PersonLatestIdResponse, TvEpisodeChangesByIdData, TvEpisodeChangesByIdResponse, TvEpisodeGroupDetailsData, TvEpisodeGroupDetailsResponse, SearchCompanyData, SearchCompanyResponse, SearchCollectionData, SearchCollectionResponse, SearchKeywordData, SearchKeywordResponse, ListsCopyData, ListsCopyResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Movie
 * Search for movies by their original, translated and alternative titles.
 */
export const searchMovie = <ThrowOnError extends boolean = false>(options: Options<SearchMovieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchMovieResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/movie',
        ...options
    });
};

/**
 * Movie
 * Find movies using over 30 filters and sort options.
 */
export const discoverMovie = <ThrowOnError extends boolean = false>(options?: Options<DiscoverMovieData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DiscoverMovieResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/discover/movie',
        ...options
    });
};

/**
 * Details
 * Get the top level details of a movie by ID.
 */
export const movieDetails = <ThrowOnError extends boolean = false>(options: Options<MovieDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}',
        ...options
    });
};

/**
 * Details
 * Get the details of a TV show.
 */
export const tvSeriesDetails = <ThrowOnError extends boolean = false>(options: Options<TvSeriesDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}',
        ...options
    });
};

/**
 * TV
 * Search for TV shows by their original, translated and also known as names.
 */
export const searchTv = <ThrowOnError extends boolean = false>(options: Options<SearchTvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchTvResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/tv',
        ...options
    });
};

/**
 * Multi
 * Use multi search when you want to search for movies, TV shows and people in a single request.
 */
export const searchMulti = <ThrowOnError extends boolean = false>(options: Options<SearchMultiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchMultiResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/multi',
        ...options
    });
};

/**
 * Person
 * Search for people by their name and also known as names.
 */
export const searchPerson = <ThrowOnError extends boolean = false>(options: Options<SearchPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchPersonResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/person',
        ...options
    });
};

/**
 * Details
 * Query the API configuration details.
 */
export const configurationDetails = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationDetailsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration',
        ...options
    });
};

/**
 * Details
 * Query the details of a TV season.
 */
export const tvSeasonDetails = <ThrowOnError extends boolean = false>(options: Options<TvSeasonDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}',
        ...options
    });
};

/**
 * Details
 * Query the details of a TV episode.
 */
export const tvEpisodeDetails = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}',
        ...options
    });
};

/**
 * TV
 * Find TV shows using over 30 filters and sort options.
 */
export const discoverTv = <ThrowOnError extends boolean = false>(options?: Options<DiscoverTvData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DiscoverTvResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/discover/tv',
        ...options
    });
};

/**
 * Images
 * Get the images that belong to a movie.
 */
export const movieImages = <ThrowOnError extends boolean = false>(options: Options<MovieImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/images',
        ...options
    });
};

/**
 * Images
 * Get the images that belong to a TV series.
 */
export const tvSeriesImages = <ThrowOnError extends boolean = false>(options: Options<TvSeriesImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/images',
        ...options
    });
};

/**
 * Images
 * Get the images that belong to a TV season.
 */
export const tvSeasonImages = <ThrowOnError extends boolean = false>(options: Options<TvSeasonImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/images',
        ...options
    });
};

/**
 * Images
 * Get the images that belong to a TV episode.
 */
export const tvEpisodeImages = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images',
        ...options
    });
};

/**
 * All
 * Get the trending movies, TV shows and people.
 */
export const trendingAll = <ThrowOnError extends boolean = false>(options: Options<TrendingAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TrendingAllResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/trending/all/{time_window}',
        ...options
    });
};

/**
 * Movies
 * Get the trending movies on _TMDB.
 */
export const trendingMovies = <ThrowOnError extends boolean = false>(options: Options<TrendingMoviesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TrendingMoviesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/trending/movie/{time_window}',
        ...options
    });
};

/**
 * TV
 * Get the trending TV shows on _TMDB.
 */
export const trendingTv = <ThrowOnError extends boolean = false>(options: Options<TrendingTvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TrendingTvResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/trending/tv/{time_window}',
        ...options
    });
};

/**
 * Account States
 * Get the rating, watchlist and favourite status of an account.
 */
export const movieAccountStates = <ThrowOnError extends boolean = false>(options: Options<MovieAccountStatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieAccountStatesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/account_states',
        ...options
    });
};

/**
 * Account States
 * Get the rating, watchlist and favourite status.
 */
export const tvSeriesAccountStates = <ThrowOnError extends boolean = false>(options: Options<TvSeriesAccountStatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesAccountStatesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/account_states',
        ...options
    });
};

/**
 * Account States
 * Get the rating, watchlist and favourite status.
 */
export const tvEpisodeAccountStates = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeAccountStatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeAccountStatesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states',
        ...options
    });
};

/**
 * People
 * Get the trending people on _TMDB.
 */
export const trendingPeople = <ThrowOnError extends boolean = false>(options: Options<TrendingPeopleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TrendingPeopleResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/trending/person/{time_window}',
        ...options
    });
};

/**
 * Alternative Titles
 * Get the alternative titles for a movie.
 */
export const movieAlternativeTitles = <ThrowOnError extends boolean = false>(options: Options<MovieAlternativeTitlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieAlternativeTitlesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/alternative_titles',
        ...options
    });
};

/**
 * Changes
 * Get the recent changes for a movie.
 */
export const movieChanges = <ThrowOnError extends boolean = false>(options: Options<MovieChangesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieChangesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/changes',
        ...options
    });
};

/**
 * Credits
 */
export const movieCredits = <ThrowOnError extends boolean = false>(options: Options<MovieCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/credits',
        ...options
    });
};

/**
 * External IDs
 */
export const movieExternalIds = <ThrowOnError extends boolean = false>(options: Options<MovieExternalIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieExternalIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/external_ids',
        ...options
    });
};

/**
 * Keywords
 */
export const movieKeywords = <ThrowOnError extends boolean = false>(options: Options<MovieKeywordsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieKeywordsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/keywords',
        ...options
    });
};

/**
 * Lists
 * Get the lists that a movie has been added to.
 */
export const movieLists = <ThrowOnError extends boolean = false>(options: Options<MovieListsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieListsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/lists',
        ...options
    });
};

/**
 * Recommendations
 */
export const movieRecommendations = <ThrowOnError extends boolean = false>(options: Options<MovieRecommendationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieRecommendationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/recommendations',
        ...options
    });
};

/**
 * Release Dates
 * Get the release dates and certifications for a movie.
 */
export const movieReleaseDates = <ThrowOnError extends boolean = false>(options: Options<MovieReleaseDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieReleaseDatesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/release_dates',
        ...options
    });
};

/**
 * Reviews
 * Get the user reviews for a movie.
 */
export const movieReviews = <ThrowOnError extends boolean = false>(options: Options<MovieReviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieReviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/reviews',
        ...options
    });
};

/**
 * Similar
 * Get the similar movies based on genres and keywords.
 */
export const movieSimilar = <ThrowOnError extends boolean = false>(options: Options<MovieSimilarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieSimilarResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/similar',
        ...options
    });
};

/**
 * Translations
 * Get the translations for a movie.
 */
export const movieTranslations = <ThrowOnError extends boolean = false>(options: Options<MovieTranslationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieTranslationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/translations',
        ...options
    });
};

/**
 * Videos
 */
export const movieVideos = <ThrowOnError extends boolean = false>(options: Options<MovieVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieVideosResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/videos',
        ...options
    });
};

/**
 * Watch Providers
 * Get the list of streaming providers we have for a movie.
 */
export const movieWatchProviders = <ThrowOnError extends boolean = false>(options: Options<MovieWatchProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MovieWatchProvidersResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/watch/providers',
        ...options
    });
};

/**
 * Delete Rating
 * Delete a user rating.
 */
export const movieDeleteRating = <ThrowOnError extends boolean = false>(options: Options<MovieDeleteRatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MovieDeleteRatingResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/rating',
        ...options
    });
};

/**
 * Add Rating
 * Rate a movie and save it to your rated list.
 */
export const movieAddRating = <ThrowOnError extends boolean = false>(options: Options<MovieAddRatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MovieAddRatingResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/rating',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Guest Session
 */
export const authenticationCreateGuestSession = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateGuestSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthenticationCreateGuestSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/guest_session/new',
        ...options
    });
};

/**
 * Create Request Token
 */
export const authenticationCreateRequestToken = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateRequestTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthenticationCreateRequestTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/token/new',
        ...options
    });
};

/**
 * Create Session
 */
export const authenticationCreateSession = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthenticationCreateSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/session/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Session (from v4 token)
 */
export const authenticationCreateSessionFromV4Token = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateSessionFromV4TokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthenticationCreateSessionFromV4TokenResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/session/convert/4',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Session
 */
export const authenticationDeleteSession = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationDeleteSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<AuthenticationDeleteSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Find By ID
 * Find data by external ID's.
 */
export const findById = <ThrowOnError extends boolean = false>(options: Options<FindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/find/{external_id}',
        ...options
    });
};

/**
 * Details
 * Query the top level details of a person.
 */
export const personDetails = <ThrowOnError extends boolean = false>(options: Options<PersonDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}',
        ...options
    });
};

/**
 * Changes
 * Get the recent changes for a person.
 */
export const personChanges = <ThrowOnError extends boolean = false>(options: Options<PersonChangesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonChangesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/changes',
        ...options
    });
};

/**
 * Changes
 * Get the recent changes for a TV show.
 */
export const tvSeriesChanges = <ThrowOnError extends boolean = false>(options: Options<TvSeriesChangesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesChangesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/changes',
        ...options
    });
};

/**
 * Images
 * Get the profile images that belong to a person.
 */
export const personImages = <ThrowOnError extends boolean = false>(options: Options<PersonImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/images',
        ...options
    });
};

/**
 * Movie Credits
 * Get the movie credits for a person.
 */
export const personMovieCredits = <ThrowOnError extends boolean = false>(options: Options<PersonMovieCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonMovieCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/movie_credits',
        ...options
    });
};

/**
 * TV Credits
 * Get the TV credits that belong to a person.
 */
export const personTvCredits = <ThrowOnError extends boolean = false>(options: Options<PersonTvCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonTvCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/tv_credits',
        ...options
    });
};

/**
 * Combined Credits
 * Get the combined movie and TV credits that belong to a person.
 */
export const personCombinedCredits = <ThrowOnError extends boolean = false>(options: Options<PersonCombinedCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonCombinedCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/combined_credits',
        ...options
    });
};

/**
 * External IDs
 * Get the external ID's that belong to a person.
 */
export const personExternalIds = <ThrowOnError extends boolean = false>(options: Options<PersonExternalIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonExternalIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/external_ids',
        ...options
    });
};

/**
 * Tagged Images
 * Get the tagged images for a person.
 */
export const personTaggedImages = <ThrowOnError extends boolean = false>(options: Options<PersonTaggedImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PersonTaggedImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/tagged_images',
        ...options
    });
};

/**
 * Translations
 * Get the translations that belong to a person.
 */
export const translations = <ThrowOnError extends boolean = false>(options: Options<TranslationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TranslationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/translations',
        ...options
    });
};

/**
 * Popular
 * Get a list of people ordered by popularity.
 */
export const personPopularList = <ThrowOnError extends boolean = false>(options?: Options<PersonPopularListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PersonPopularListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/popular',
        ...options
    });
};

/**
 * Popular
 * Get a list of movies ordered by popularity.
 */
export const moviePopularList = <ThrowOnError extends boolean = false>(options?: Options<MoviePopularListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MoviePopularListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/popular',
        ...options
    });
};

/**
 * Top Rated
 * Get a list of movies ordered by rating.
 */
export const movieTopRatedList = <ThrowOnError extends boolean = false>(options?: Options<MovieTopRatedListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MovieTopRatedListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/top_rated',
        ...options
    });
};

/**
 * Upcoming
 * Get a list of movies that are being released soon.
 */
export const movieUpcomingList = <ThrowOnError extends boolean = false>(options?: Options<MovieUpcomingListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MovieUpcomingListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/upcoming',
        ...options
    });
};

/**
 * Now Playing
 * Get a list of movies that are currently in theatres.
 */
export const movieNowPlayingList = <ThrowOnError extends boolean = false>(options?: Options<MovieNowPlayingListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MovieNowPlayingListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/now_playing',
        ...options
    });
};

/**
 * Airing Today
 * Get a list of TV shows airing today.
 */
export const tvSeriesAiringTodayList = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesAiringTodayListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TvSeriesAiringTodayListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/airing_today',
        ...options
    });
};

/**
 * On The Air
 * Get a list of TV shows that air in the next 7 days.
 */
export const tvSeriesOnTheAirList = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesOnTheAirListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TvSeriesOnTheAirListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/on_the_air',
        ...options
    });
};

/**
 * Popular
 * Get a list of TV shows ordered by popularity.
 */
export const tvSeriesPopularList = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesPopularListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TvSeriesPopularListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/popular',
        ...options
    });
};

/**
 * Top Rated
 * Get a list of TV shows ordered by rating.
 */
export const tvSeriesTopRatedList = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesTopRatedListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TvSeriesTopRatedListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/top_rated',
        ...options
    });
};

/**
 * Latest
 * Get the newest movie ID.
 */
export const movieLatestId = <ThrowOnError extends boolean = false>(options?: Options<MovieLatestIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MovieLatestIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/latest',
        ...options
    });
};

/**
 * Latest
 * Get the newest TV show ID.
 */
export const tvSeriesLatestId = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesLatestIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TvSeriesLatestIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/latest',
        ...options
    });
};

/**
 * Aggregate Credits
 * Get the aggregate credits (cast and crew) that have been added to a TV show.
 */
export const tvSeriesAggregateCredits = <ThrowOnError extends boolean = false>(options: Options<TvSeriesAggregateCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesAggregateCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/aggregate_credits',
        ...options
    });
};

/**
 * Alternative Titles
 * Get the alternative titles that have been added to a TV show.
 */
export const tvSeriesAlternativeTitles = <ThrowOnError extends boolean = false>(options: Options<TvSeriesAlternativeTitlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesAlternativeTitlesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/alternative_titles',
        ...options
    });
};

/**
 * Content Ratings
 * Get the content ratings that have been added to a TV show.
 */
export const tvSeriesContentRatings = <ThrowOnError extends boolean = false>(options: Options<TvSeriesContentRatingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesContentRatingsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/content_ratings',
        ...options
    });
};

/**
 * Credits
 * Get the latest season credits of a TV show.
 */
export const tvSeriesCredits = <ThrowOnError extends boolean = false>(options: Options<TvSeriesCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/credits',
        ...options
    });
};

/**
 * Episode Groups
 * Get the episode groups that have been added to a TV show.
 */
export const tvSeriesEpisodeGroups = <ThrowOnError extends boolean = false>(options: Options<TvSeriesEpisodeGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesEpisodeGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/episode_groups',
        ...options
    });
};

/**
 * External IDs
 * Get a list of external IDs that have been added to a TV show.
 */
export const tvSeriesExternalIds = <ThrowOnError extends boolean = false>(options: Options<TvSeriesExternalIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesExternalIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/external_ids',
        ...options
    });
};

/**
 * Keywords
 * Get a list of keywords that have been added to a TV show.
 */
export const tvSeriesKeywords = <ThrowOnError extends boolean = false>(options: Options<TvSeriesKeywordsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesKeywordsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/keywords',
        ...options
    });
};

/**
 * Recommendations
 */
export const tvSeriesRecommendations = <ThrowOnError extends boolean = false>(options: Options<TvSeriesRecommendationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesRecommendationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/recommendations',
        ...options
    });
};

/**
 * Reviews
 * Get the reviews that have been added to a TV show.
 */
export const tvSeriesReviews = <ThrowOnError extends boolean = false>(options: Options<TvSeriesReviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesReviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/reviews',
        ...options
    });
};

/**
 * Screened Theatrically
 * Get the seasons and episodes that have screened theatrically.
 */
export const tvSeriesScreenedTheatrically = <ThrowOnError extends boolean = false>(options: Options<TvSeriesScreenedTheatricallyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesScreenedTheatricallyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/screened_theatrically',
        ...options
    });
};

/**
 * Similar
 * Get the similar TV shows.
 */
export const tvSeriesSimilar = <ThrowOnError extends boolean = false>(options: Options<TvSeriesSimilarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesSimilarResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/similar',
        ...options
    });
};

/**
 * Translations
 * Get the translations that have been added to a TV show.
 */
export const tvSeriesTranslations = <ThrowOnError extends boolean = false>(options: Options<TvSeriesTranslationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesTranslationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/translations',
        ...options
    });
};

/**
 * Videos
 * Get the videos that belong to a TV show.
 */
export const tvSeriesVideos = <ThrowOnError extends boolean = false>(options: Options<TvSeriesVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesVideosResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/videos',
        ...options
    });
};

/**
 * Watch Providers
 * Get the list of streaming providers we have for a TV show.
 */
export const tvSeriesWatchProviders = <ThrowOnError extends boolean = false>(options: Options<TvSeriesWatchProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeriesWatchProvidersResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/watch/providers',
        ...options
    });
};

/**
 * Delete Rating
 */
export const tvSeriesDeleteRating = <ThrowOnError extends boolean = false>(options: Options<TvSeriesDeleteRatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TvSeriesDeleteRatingResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/rating',
        ...options
    });
};

/**
 * Add Rating
 * Rate a TV show and save it to your rated list.
 */
export const tvSeriesAddRating = <ThrowOnError extends boolean = false>(options: Options<TvSeriesAddRatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TvSeriesAddRatingResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/rating',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Account States
 * Get the rating, watchlist and favourite status.
 */
export const tvSeasonAccountStates = <ThrowOnError extends boolean = false>(options: Options<TvSeasonAccountStatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonAccountStatesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/account_states',
        ...options
    });
};

/**
 * Aggregate Credits
 * Get the aggregate credits (cast and crew) that have been added to a TV season.
 */
export const tvSeasonAggregateCredits = <ThrowOnError extends boolean = false>(options: Options<TvSeasonAggregateCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonAggregateCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/aggregate_credits',
        ...options
    });
};

/**
 * Changes
 * Get the recent changes for a TV season.
 */
export const tvSeasonChangesById = <ThrowOnError extends boolean = false>(options: Options<TvSeasonChangesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonChangesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/season/{season_id}/changes',
        ...options
    });
};

/**
 * Credits
 */
export const tvSeasonCredits = <ThrowOnError extends boolean = false>(options: Options<TvSeasonCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/credits',
        ...options
    });
};

/**
 * External IDs
 * Get a list of external IDs that have been added to a TV season.
 */
export const tvSeasonExternalIds = <ThrowOnError extends boolean = false>(options: Options<TvSeasonExternalIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonExternalIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/external_ids',
        ...options
    });
};

/**
 * Translations
 * Get the translations for a TV season.
 */
export const tvSeasonTranslations = <ThrowOnError extends boolean = false>(options: Options<TvSeasonTranslationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonTranslationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/translations',
        ...options
    });
};

/**
 * Videos
 * Get the videos that belong to a TV season.
 */
export const tvSeasonVideos = <ThrowOnError extends boolean = false>(options: Options<TvSeasonVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonVideosResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/videos',
        ...options
    });
};

/**
 * Credits
 */
export const tvEpisodeCredits = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeCreditsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits',
        ...options
    });
};

/**
 * External IDs
 * Get a list of external IDs that have been added to a TV episode.
 */
export const tvEpisodeExternalIds = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeExternalIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeExternalIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids',
        ...options
    });
};

/**
 * Translations
 * Get the translations that have been added to a TV episode.
 */
export const tvEpisodeTranslations = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeTranslationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeTranslationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations',
        ...options
    });
};

/**
 * Videos
 * Get the videos that belong to a TV episode.
 */
export const tvEpisodeVideos = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeVideosResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos',
        ...options
    });
};

/**
 * Delete Rating
 * Delete your rating on a TV episode.
 */
export const tvEpisodeDeleteRating = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeDeleteRatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TvEpisodeDeleteRatingResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating',
        ...options
    });
};

/**
 * Add Rating
 * Rate a TV episode and save it to your rated list.
 */
export const tvEpisodeAddRating = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeAddRatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TvEpisodeAddRatingResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Details
 * Get the public details of an account on _TMDB.
 */
export const accountDetails = <ThrowOnError extends boolean = false>(options: Options<AccountDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}',
        ...options
    });
};

/**
 * Lists
 * Get a users list of custom lists.
 */
export const accountLists = <ThrowOnError extends boolean = false>(options: Options<AccountListsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountListsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/lists',
        ...options
    });
};

/**
 * Favorite Movies
 * Get a users list of favourite movies.
 */
export const accountGetFavorites = <ThrowOnError extends boolean = false>(options: Options<AccountGetFavoritesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountGetFavoritesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/favorite/movies',
        ...options
    });
};

/**
 * Favorite TV
 * Get a users list of favourite TV shows.
 */
export const accountFavoriteTv = <ThrowOnError extends boolean = false>(options: Options<AccountFavoriteTvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountFavoriteTvResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/favorite/tv',
        ...options
    });
};

/**
 * Rated Movies
 * Get a users list of rated movies.
 */
export const accountRatedMovies = <ThrowOnError extends boolean = false>(options: Options<AccountRatedMoviesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountRatedMoviesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/rated/movies',
        ...options
    });
};

/**
 * Rated TV
 * Get a users list of rated TV shows.
 */
export const accountRatedTv = <ThrowOnError extends boolean = false>(options: Options<AccountRatedTvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountRatedTvResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/rated/tv',
        ...options
    });
};

/**
 * Rated TV Episodes
 * Get a users list of rated TV episodes.
 */
export const accountRatedTvEpisodes = <ThrowOnError extends boolean = false>(options: Options<AccountRatedTvEpisodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountRatedTvEpisodesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/rated/tv/episodes',
        ...options
    });
};

/**
 * Watchlist Movies
 * Get a list of movies added to a users watchlist.
 */
export const accountWatchlistMovies = <ThrowOnError extends boolean = false>(options: Options<AccountWatchlistMoviesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountWatchlistMoviesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/watchlist/movies',
        ...options
    });
};

/**
 * Watchlist TV
 * Get a list of TV shows added to a users watchlist.
 */
export const accountWatchlistTv = <ThrowOnError extends boolean = false>(options: Options<AccountWatchlistTvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccountWatchlistTvResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/watchlist/tv',
        ...options
    });
};

/**
 * Add Favorite
 * Mark a movie or TV show as a favourite.
 */
export const accountAddFavorite = <ThrowOnError extends boolean = false>(options: Options<AccountAddFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccountAddFavoriteResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/favorite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add To Watchlist
 * Add a movie or TV show to your watchlist.
 */
export const accountAddToWatchlist = <ThrowOnError extends boolean = false>(options: Options<AccountAddToWatchlistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccountAddToWatchlistResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/watchlist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Movie Certifications
 * Get an up to date list of the officially supported movie certifications on _TMDB.
 */
export const certificationMovieList = <ThrowOnError extends boolean = false>(options?: Options<CertificationMovieListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CertificationMovieListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/certification/movie/list',
        ...options
    });
};

/**
 * TV Certifications
 */
export const certificationsTvList = <ThrowOnError extends boolean = false>(options?: Options<CertificationsTvListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CertificationsTvListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/certification/tv/list',
        ...options
    });
};

/**
 * Movie List
 * Get a list of all of the movie ids that have been changed in the past 24 hours.
 */
export const changesMovieList = <ThrowOnError extends boolean = false>(options?: Options<ChangesMovieListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChangesMovieListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/changes',
        ...options
    });
};

/**
 * TV List
 */
export const changesTvList = <ThrowOnError extends boolean = false>(options?: Options<ChangesTvListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChangesTvListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/changes',
        ...options
    });
};

/**
 * People List
 */
export const changesPeopleList = <ThrowOnError extends boolean = false>(options?: Options<ChangesPeopleListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChangesPeopleListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/changes',
        ...options
    });
};

/**
 * Details
 * Get collection details by ID.
 */
export const collectionDetails = <ThrowOnError extends boolean = false>(options: Options<CollectionDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CollectionDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/collection/{collection_id}',
        ...options
    });
};

/**
 * Images
 * Get the images that belong to a collection.
 */
export const collectionImages = <ThrowOnError extends boolean = false>(options: Options<CollectionImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CollectionImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/collection/{collection_id}/images',
        ...options
    });
};

/**
 * Translations
 */
export const collectionTranslations = <ThrowOnError extends boolean = false>(options: Options<CollectionTranslationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CollectionTranslationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/collection/{collection_id}/translations',
        ...options
    });
};

/**
 * Details
 * Get the company details by ID.
 */
export const companyDetails = <ThrowOnError extends boolean = false>(options: Options<CompanyDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CompanyDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/company/{company_id}',
        ...options
    });
};

/**
 * Alternative Names
 * Get the company details by ID.
 */
export const companyAlternativeNames = <ThrowOnError extends boolean = false>(options: Options<CompanyAlternativeNamesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CompanyAlternativeNamesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/company/{company_id}/alternative_names',
        ...options
    });
};

/**
 * Images
 * Get the company logos by id.
 */
export const companyImages = <ThrowOnError extends boolean = false>(options: Options<CompanyImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CompanyImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/company/{company_id}/images',
        ...options
    });
};

/**
 * Details
 * Get a movie or TV credit details by ID.
 */
export const creditDetails = <ThrowOnError extends boolean = false>(options: Options<CreditDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CreditDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/credit/{credit_id}',
        ...options
    });
};

/**
 * Movie List
 * Get the list of official genres for movies.
 */
export const genreMovieList = <ThrowOnError extends boolean = false>(options?: Options<GenreMovieListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GenreMovieListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/genre/movie/list',
        ...options
    });
};

/**
 * TV List
 * Get the list of official genres for TV shows.
 */
export const genreTvList = <ThrowOnError extends boolean = false>(options?: Options<GenreTvListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GenreTvListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/genre/tv/list',
        ...options
    });
};

/**
 * Rated Movies
 * Get the rated movies for a guest session.
 */
export const guestSessionRatedMovies = <ThrowOnError extends boolean = false>(options: Options<GuestSessionRatedMoviesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GuestSessionRatedMoviesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/guest_session/{guest_session_id}/rated/movies',
        ...options
    });
};

/**
 * Rated TV
 * Get the rated TV shows for a guest session.
 */
export const guestSessionRatedTv = <ThrowOnError extends boolean = false>(options: Options<GuestSessionRatedTvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GuestSessionRatedTvResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/guest_session/{guest_session_id}/rated/tv',
        ...options
    });
};

/**
 * Rated TV Episodes
 * Get the rated TV episodes for a guest session.
 */
export const guestSessionRatedTvEpisodes = <ThrowOnError extends boolean = false>(options: Options<GuestSessionRatedTvEpisodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GuestSessionRatedTvEpisodesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/guest_session/{guest_session_id}/rated/tv/episodes',
        ...options
    });
};

/**
 * Available Regions
 * Get the list of the countries we have watch provider (OTT/streaming) data for.
 */
export const watchProvidersAvailableRegions = <ThrowOnError extends boolean = false>(options?: Options<WatchProvidersAvailableRegionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<WatchProvidersAvailableRegionsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/watch/providers/regions',
        ...options
    });
};

/**
 * Movie Providers
 * Get the list of streaming providers we have for movies.
 */
export const watchProvidersMovieList = <ThrowOnError extends boolean = false>(options?: Options<WatchProvidersMovieListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<WatchProvidersMovieListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/watch/providers/movie',
        ...options
    });
};

/**
 * TV Providers
 * Get the list of streaming providers we have for TV shows.
 */
export const watchProviderTvList = <ThrowOnError extends boolean = false>(options?: Options<WatchProviderTvListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<WatchProviderTvListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/watch/providers/tv',
        ...options
    });
};

/**
 * Details
 */
export const keywordDetails = <ThrowOnError extends boolean = false>(options: Options<KeywordDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeywordDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/keyword/{keyword_id}',
        ...options
    });
};

/**
 * Movies
 */
export const keywordMovies = <ThrowOnError extends boolean = false>(options: Options<KeywordMoviesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeywordMoviesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/keyword/{keyword_id}/movies',
        ...options
    });
};

/**
 * Delete
 * Delete a list.
 */
export const listDelete = <ThrowOnError extends boolean = false>(options: Options<ListDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ListDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}',
        ...options
    });
};

/**
 * Details
 */
export const listDetails = <ThrowOnError extends boolean = false>(options: Options<ListDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}',
        ...options
    });
};

/**
 * Check Item Status
 * Use this method to check if an item has already been added to the list.
 */
export const listCheckItemStatus = <ThrowOnError extends boolean = false>(options: Options<ListCheckItemStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCheckItemStatusResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}/item_status',
        ...options
    });
};

/**
 * Create
 */
export const listCreate = <ThrowOnError extends boolean = false>(options: Options<ListCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ListCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add Movie
 * Add a movie to a list.
 */
export const listAddMovie = <ThrowOnError extends boolean = false>(options: Options<ListAddMovieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ListAddMovieResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}/add_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove Movie
 * Remove a movie from a list.
 */
export const listRemoveMovie = <ThrowOnError extends boolean = false>(options: Options<ListRemoveMovieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ListRemoveMovieResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}/remove_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Clear
 * Clear all items from a list.
 */
export const listClear = <ThrowOnError extends boolean = false>(options: Options<ListClearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ListClearResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}/clear',
        ...options
    });
};

/**
 * Details
 */
export const networkDetails = <ThrowOnError extends boolean = false>(options: Options<NetworkDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NetworkDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/network/{network_id}',
        ...options
    });
};

/**
 * Alternative Names
 * Get the alternative names of a network.
 */
export const detailsCopy = <ThrowOnError extends boolean = false>(options: Options<DetailsCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DetailsCopyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/network/{network_id}/alternative_names',
        ...options
    });
};

/**
 * Images
 * Get the TV network logos by id.
 */
export const alternativeNamesCopy = <ThrowOnError extends boolean = false>(options: Options<AlternativeNamesCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeNamesCopyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/network/{network_id}/images',
        ...options
    });
};

/**
 * Details
 * Retrieve the details of a movie or TV show review.
 */
export const reviewDetails = <ThrowOnError extends boolean = false>(options: Options<ReviewDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReviewDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/review/{review_id}',
        ...options
    });
};

/**
 * Validate Key
 * Test your API Key to see if it's valid.
 */
export const authenticationValidateKey = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationValidateKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthenticationValidateKeyResponse, AuthenticationValidateKeyError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication',
        ...options
    });
};

/**
 * Watch Providers
 * Get the list of streaming providers we have for a TV season.
 */
export const tvSeasonWatchProviders = <ThrowOnError extends boolean = false>(options: Options<TvSeasonWatchProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvSeasonWatchProvidersResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/watch/providers',
        ...options
    });
};

/**
 * Countries
 * Get the list of countries (ISO 3166-1 tags) used throughout _TMDB.
 */
export const configurationCountries = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationCountriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationCountriesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/countries',
        ...options
    });
};

/**
 * Jobs
 * Get the list of the jobs and departments we use on _TMDB.
 */
export const configurationJobs = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationJobsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/jobs',
        ...options
    });
};

/**
 * Languages
 * Get the list of languages (ISO 639-1 tags) used throughout _TMDB.
 */
export const configurationLanguages = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationLanguagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationLanguagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/languages',
        ...options
    });
};

/**
 * Primary Translations
 * Get a list of the officially supported translations on _TMDB.
 */
export const configurationPrimaryTranslations = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationPrimaryTranslationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationPrimaryTranslationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/primary_translations',
        ...options
    });
};

/**
 * Timezones
 * Get the list of timezones used throughout _TMDB.
 */
export const configurationTimezones = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationTimezonesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationTimezonesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/timezones',
        ...options
    });
};

/**
 * Create Session (with login)
 * This method allows an application to validate a request token by entering a username and password.
 */
export const authenticationCreateSessionFromLogin = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateSessionFromLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthenticationCreateSessionFromLoginResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/token/validate_with_login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Latest
 * Get the newest created person. This is a live response and will continuously change.
 */
export const personLatestId = <ThrowOnError extends boolean = false>(options?: Options<PersonLatestIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PersonLatestIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/latest',
        ...options
    });
};

/**
 * Changes
 * Get the recent changes for a TV episode.
 */
export const tvEpisodeChangesById = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeChangesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeChangesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/episode/{episode_id}/changes',
        ...options
    });
};

/**
 * Details
 * Get the details of a TV episode group.
 */
export const tvEpisodeGroupDetails = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeGroupDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TvEpisodeGroupDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/episode_group/{tv_episode_group_id}',
        ...options
    });
};

/**
 * Company
 * Search for companies by their original and alternative names.
 */
export const searchCompany = <ThrowOnError extends boolean = false>(options: Options<SearchCompanyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchCompanyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/company',
        ...options
    });
};

/**
 * Collection
 * Search for collections by their original, translated and alternative names.
 */
export const searchCollection = <ThrowOnError extends boolean = false>(options: Options<SearchCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/collection',
        ...options
    });
};

/**
 * Keyword
 * Search for keywords by their name.
 */
export const searchKeyword = <ThrowOnError extends boolean = false>(options: Options<SearchKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchKeywordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/keyword',
        ...options
    });
};

/**
 * Lists
 * Get the lists that a TV series has been added to.
 */
export const listsCopy = <ThrowOnError extends boolean = false>(options: Options<ListsCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListsCopyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/lists',
        ...options
    });
};